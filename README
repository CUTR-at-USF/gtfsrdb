GTFSrDB - GTFS-realtime to Database
===================================

GTFSrDB loads GTFS-realtime data to a database.  It will run an keep a
database up-to-date with the latest GTFSr data. It can also be used to
archive this data for historical or statistical purposes. It it
designed to work in tandem with gtfsdb
(http://code.google.com/p/gtfsdb/).

It uses SQLAlchemy, so it should work with most any database system;
I've been using it with SQLite. Just specify a database url on the
command line with -d.

Example use (for Bay Area Rapid Transit):

gtfsrdb.py -t http://www.bart.gov/dev/gtrtfs/tripupdate.aspx -d sqlite:///test.db -c

The model for the data is in model.py; you should be able to use this 
standalone with SQLAlchemy to process the data in Python.

It supports both trip updates (specify url with -t option) and alerts
(-a). The -o option instructs it to keep the database up-to-date by
deleting outdated updates and alerts. Omitting this option will cause
each update to be saved forever (useful for historical purposes). Note
that using this option will erase ALL TRIP UPDATES and ALL ALERTS from
the database on each iteration - even those that were in the database
before the session was started.

KNOWN LIMITATIONS
=================
The following fields that are separate messages in GTFSr are collapsed
into columns in the parent in the SQL database (to avoid creating many
joined tables):

* TripUpdate.trip becomes trip_id, route_id, trip_start_time, trip_start_date
* TripUpdate.vehicle becomes vehicle_id, vehicle_label and
  vehicle_license_plate
* StopTimeUpdate.arrival becomes arrival_time, arrival_delay & 
  arrival_uncertainty
* StopTimeUpdated.departure becomes departure_time &c.
